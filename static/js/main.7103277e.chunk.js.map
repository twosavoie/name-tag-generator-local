{"version":3,"sources":["NameTag.js","index.js"],"names":["NameTag","props","className","name","renderNameTag","App","state","names","NameTagElements","this","map","Component","rootElement","document","getElementById","ReactDOM","render"],"mappings":"yNAkBeA,EARC,SAACC,GAAD,OACZ,sBAAKC,UAAU,WAAf,UACI,oBAAIA,UAAU,QAAd,mBACA,mBAAGA,UAAU,WAAb,wBACA,oBAAIA,UAAU,OAAd,SAAsBD,EAAME,WCP9BC,G,MAAgB,SAACD,GAAD,OAAU,cAAC,EAAD,CAASA,KAAMA,GAAWA,KAGpDE,E,4MACJC,MAAQ,CAAEC,MAAO,CAAC,OAAQ,OAAQ,SAAU,SAAU,MAAO,U,4CAE7D,WACA,IAAMC,EAAkBC,KAAKH,MAAMC,MAAMG,IAAIN,GAC7C,OACE,sBAAKF,UAAU,MAAf,UACE,oDAECM,S,GATWG,aAeZC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,cAAC,EAAD,IAASJ,K","file":"static/js/main.7103277e.chunk.js","sourcesContent":["import React from \"react\";\n\n/* write an arrow function called \"NameTag\" that returns JSX\nThe JSX returned should consist of:\n  - a div element with className attribute of \"name-tag\" and three nested children elements:\n    - an h3 element with className attribute of \"title\" and the inner text of \"HELLO\"\n    - a p element with className attribute of \"subtitle\" and the inner text of \"my name is\"\n    - a h2 element with className attribute of \"name\" and the inner text of your name\n*/\n// why does this have parenthesis instead of curly braces? Because it is an implicit return equivalent to => { return ()}. The parenthesis are used when there is a multiline/multi expression return value. Could avoid parenthesis if it fits on a single line.\nconst NameTag = (props) => (\n    <div className=\"name-tag\">\n        <h3 className=\"title\">HELLO</h3>\n        <p className=\"subtitle\">my name is</p>\n        <h2 className=\"name\">{props.name}</h2>\n    </div>\n)\n\nexport default NameTag;\n/* export our functional component definition to be \nimported then rendered within another module */\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport NameTag from \"./NameTag.js\";\n\nimport \"./styles.css\";\n\n// previously <NameTag /> was in the App component as:  <NameTag name=\"Erin\" /> and this passed the name to props in NameTag. Now we've created a data.js file to hold an array of names and ids. This callback function now takes in the data from the array and will pass it to the NameTag component through props.\nconst renderNameTag = (name) => <NameTag name={name} key={name} />\n\n\nclass App extends Component {\n  state = { names: [\"Lisa\", \"Joey\", \"Cristy\", \"Sharon\", \"Ann\", \"Kelli\"]};\n  // mapping to receive the names from the callback function to get the tag JSX for each name\n  render() {\n  const NameTagElements = this.state.names.map(renderNameTag);\n  return (\n    <div className=\"App\">\n      <h1>Name Tag Generator</h1>\n      {/* result of mapping over the callback function */}\n      {NameTagElements}\n    </div>\n  );\n};\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}