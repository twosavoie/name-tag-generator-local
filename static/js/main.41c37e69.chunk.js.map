{"version":3,"sources":["NameTag.js","NameTagList.js","UserInput.js","App.js","index.js"],"names":["NameTag","props","className","name","onClick","removeName","index","NameTagList","NameTagElements","names","map","UserInput","state","updateName","event","setState","target","value","handleSubmit","preventDefault","addName","onSubmit","this","type","placeholder","onChange","Component","App","newNames","clickedIndex","filter","_","savedNamesString","localStorage","getItem","savedNames","JSON","parse","console","log","stringify","setItem","rootElement","document","getElementById","ReactDOM","render"],"mappings":"2MAwBiBA,EAdD,SAACC,GAEb,OACE,sBAAKC,UAAU,WAAf,UACE,oBAAIA,UAAU,QAAd,mBACA,mBAAGA,UAAU,WAAb,wBACA,oBAAIA,UAAU,OAAd,SAAsBD,EAAME,OAC5B,sBAAMC,QANY,kBAAMH,EAAMI,WAAWJ,EAAMK,QAMjBJ,UAAU,mBAAxC,mBCCOK,G,KAbK,SAACN,GACnB,IAQMO,EAAkBP,EAAMQ,MAAMC,KARd,SAACP,EAAMG,GAAP,OACpB,cAAC,EAAD,CACEH,KAAMA,EAENE,WAAYJ,EAAMI,WAClBC,MAAOA,GAFFH,MAMT,OAAO,+BAAOK,MCUDG,E,4MAtBXC,MAAQ,CACJT,KAAM,I,EAEVU,WAAa,SAACC,GAAD,OAAW,EAAKC,SAAS,CAAEZ,KAAMW,EAAME,OAAOC,S,EAE3DC,aAAe,SAACJ,GACZA,EAAMK,iBACN,EAAKlB,MAAMmB,QAAQ,EAAKR,MAAMT,MAE9B,EAAKY,SAAS,CAAEZ,KAAM,M,4CAE1B,WACI,OACI,uBAAMkB,SAAUC,KAAKJ,aAArB,UAEI,uBAAOK,KAAK,OAAOC,YAAY,yBAAyBP,MAAOK,KAAKV,MAAMT,KAAMsB,SAAUH,KAAKT,aAC/F,uBAAOU,KAAK,SAASN,MAAM,2B,GAjBnBS,aC0CTC,E,4MAvCXf,MAAQ,CACJH,MAAO,CAAC,OAAQ,MAAO,UAAW,SAAU,OAAQ,S,EAGxDW,QAAU,SAACjB,GACP,IAAMyB,EAAQ,CAAIzB,GAAJ,mBAAa,EAAKS,MAAMH,QACtC,EAAKM,SAAS,CAAEN,MAAOmB,K,EAE3BvB,WAAa,SAACwB,GAEV,IACMD,EAAW,EAAKhB,MAAMH,MAAMqB,QADX,SAACC,EAAGzB,GAAJ,OAAcA,IAAUuB,KAG/C,EAAKd,SAAS,CAAEN,MAAOmB,K,uDAE3B,WACI,IAAMI,EAAmBC,aAAaC,QAAQ,cAC9C,GAAIF,EAAkB,CAClB,IAAMG,EAAaC,KAAKC,MAAML,GAC9BV,KAAKP,SAAS,CAAEN,MAAO0B,IACvBG,QAAQC,IAAIP,M,gCAGpB,WACI,IAAMA,EAAmBI,KAAKI,UAAUlB,KAAKV,MAAMH,OACnDwB,aAAaQ,QAAQ,aAAcT,K,oBAEvC,WACI,OACI,sBAAK9B,UAAU,MAAf,UACI,oDAEA,cAAC,EAAD,CAAWkB,QAASE,KAAKF,UACzB,cAAC,EAAD,CAAaX,MAAOa,KAAKV,MAAMH,MAAOJ,WAAYiB,KAAKjB,oB,GAlCrDqB,aCEZgB,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,cAAC,EAAD,IAASJ,I","file":"static/js/main.41c37e69.chunk.js","sourcesContent":["import React from \"react\";\n\n/* write an arrow function called \"NameTag\" that returns JSX\nThe JSX returned should consist of:\n  - a div element with className attribute of \"name-tag\" and three nested children elements:\n    - an h3 element with className attribute of \"title\" and the inner text of \"HELLO\"\n    - a p element with className attribute of \"subtitle\" and the inner text of \"my name is\"\n    - a h2 element with className attribute of \"name\" and the inner text of your name\n*/\n// why does this have parenthesis instead of curly braces? Because it is an implicit return equivalent to => { return ()}. The parenthesis are used when there is a multiline/multi expression return value. Could avoid parenthesis if it fits on a single line.\nconst NameTag = (props) => {\n    const deleteByIndex = () => props.removeName(props.index);\n    return (\n      <div className=\"name-tag\">\n        <h3 className=\"title\">HELLO</h3>\n        <p className=\"subtitle\">my name is</p>\n        <h2 className=\"name\">{props.name}</h2>\n        <span onClick={deleteByIndex} className=\"name-tag__delete\">\n          x\n        </span>\n      </div>\n    );\n  };\n  \n  export default NameTag;\n/* export our functional component definition to be \nimported then rendered within another module */\n","import React from \"react\";\nimport NameTag from \"./NameTag.js\";\nimport \"./styles.css\";\n\n//props used to pass a reference to the removeName method to the event listener in the NameTag component that calls the removeName method (in App component (?) NameTag component (?))\nconst NameTagList = (props) => {\n  const renderNameTag = (name, index) => (\n    <NameTag\n      name={name}\n      key={name}\n      removeName={props.removeName}\n      index={index}\n    />\n  );\n  const NameTagElements = props.names.map(renderNameTag);\n  return <main>{NameTagElements}</main>;\n};\n\nexport default NameTagList;\n","import React, { Component } from \"react\";\n\nclass UserInput extends Component {\n    state = {\n        name: \"\"\n    };\n    updateName = (event) => this.setState({ name: event.target.value });\n    // call addName method with the name to be added to the array of names\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.props.addName(this.state.name);\n        // initialize the state property names as an empty array. is how the lesson reads but I think it's wrong\n        this.setState({ name: \"\" });\n    };\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit} >\n                {/* input element will display the value in state */}\n                <input type=\"text\" placeholder=\"Add a new name here...\" value={this.state.name} onChange={this.updateName} />\n                <input type=\"submit\" value=\"Create Name Tag\" />\n            </form>\n        );\n    }\n}\n\nexport default UserInput;","import React, { Component } from \"react\";\nimport NameTagList from \"./NameTagList.js\";\nimport UserInput from \"./UserInput.js\";\n\nclass App extends Component {\n    state = {\n        names: [\"Erin\", \"Ann\", \"Nichole\", \"Sharon\", \"Lisa\", \"Joey\"]\n    };\n    // adds a new name to the names array in state in the App component\n    addName = (name) => {\n        const newNames = [name, ...this.state.names];\n        this.setState({ names: newNames });\n    };\n    removeName = (clickedIndex) => {\n        // to learn how the .filter method works, check out https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\n        const filterCallback = (_, index) => index !== clickedIndex;\n        const newNames = this.state.names.filter(filterCallback);\n        // removeName method is calling this.setState with an updated data model\n        this.setState({ names: newNames });\n    };\n    componentDidMount () {\n        const savedNamesString = localStorage.getItem(\"savedNames\");\n        if (savedNamesString) {\n            const savedNames = JSON.parse(savedNamesString);\n            this.setState({ names: savedNames });\n            console.log(savedNamesString);\n        }\n    }   \n    componentDidUpdate () {\n        const savedNamesString = JSON.stringify(this.state.names);\n        localStorage.setItem(\"savedNames\", savedNamesString);\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>Name Tag Generator</h1>\n                {/* pass a reference from addName method to UserInput component reference removeName just below */}\n                <UserInput addName={this.addName} />\n                <NameTagList names={this.state.names} removeName={this.removeName} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\n\nimport \"./styles.css\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}